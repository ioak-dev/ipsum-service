defmodule Ipsum.Flatten do
    alias Ipsum.Mock
    alias Ipsum.Text

    import Ecto

    def run(data) do
        hierarchy = 
            decompose(Ecto.UUID.generate, nil, "root", data, 0)
            # |> List.keysort(4)
            # |> IO.inspect
            # |> Enum.reverse
            # |> IO.inspect
        
        hierarchy_lookup = mapize(hierarchy, %{})

        hierarchy |> IO.inspect
        hierarchy_lookup |> IO.inspect

        hierarchy
        |> extract_keys_from_tuple
        # |> IO.inspect
        |> Enum.uniq
        # |> IO.inspect
        |> flatten(hierarchy_lookup, [])
        # |> IO.inspect
        # data
    end

    defp decompose(id, parent_id, current_key, node, level) when is_binary(node) do
        [{id, parent_id, current_key, node, level}]
    end

    defp decompose(id, parent_id, current_key, node, level) when is_map(node) do
        first_key = 
            node
            |> Map.keys
            |> List.first

        tail_node = 
            Map.delete(node, first_key)

        head_data = decompose(id, parent_id, first_key, node[first_key], level)
        if map_size(tail_node) > 0 do
            tail_data = decompose(id, parent_id, nil, tail_node, level)
            head_data ++ tail_data
        else
            head_data
        end
    end

    defp decompose(id, parent_id, current_key, [head | tail], level) do
        if Enum.count(tail) != 0 do
            [{id, parent_id, "__placeholder", "", level}] ++ decompose(Ecto.UUID.generate, id, current_key, head, level + 1) ++ decompose(id, parent_id, current_key, tail, level)
        else
            [{id, parent_id, "__placeholder", "", level}] ++ decompose(Ecto.UUID.generate, id, current_key, head, level + 1)
        end
    end

    defp decompose(id, parent_id, current_key, node, level) when true do
        IO.puts("****no match begin")
        IO.inspect(node)
        IO.puts("****no match end")
    end

    defp mapize([head | tail], stage) do
        if Map.has_key?(stage, elem(head, 0)) do
            new_stage_element = %{elem(head, 0) => %{elem(head, 2) => elem(head, 3)} |> Map.merge(stage[elem(head, 0)])}
            new_stage = Map.delete(stage, elem(head, 0)) |> Map.merge(new_stage_element)
            
            if Enum.count(tail) > 0 do
                mapize(tail, new_stage)
            else
                new_stage
            end
        else
            new_stage = %{elem(head, 0) => %{elem(head, 2) => elem(head, 3), "__parent" => elem(head,1)}} |> Map.merge(stage)
            if Enum.count(tail) > 0 do
                mapize(tail, new_stage)
            else
                new_stage
            end
        end
    end

    defp flatten([head | tail], hierarchy_map, processed_keys) do
        entry = 
        head
        |> trace_hierarchy(hierarchy_map, %{}, [])
        if Enum.count(tail) > 0 do
            [entry] ++ flatten(tail, hierarchy_map, entry)
        else
            [entry]
        end
    end

    defp trace_hierarchy(element_key, hierarchy_map, record, processed_keys) do
        if element_key == nil do
            record
        else
            {parent_key, new_record} = 
            hierarchy_map
            |> Map.get(element_key)
            |> merge_map(record)
            |> Map.pop("__parent")
            trace_hierarchy(parent_key, hierarchy_map, new_record, [parent_key | processed_keys])
        end
    end

    defp extract_keys_from_tuple([head | tail]) do
        if Enum.count(tail) !== 0 do
            [elem(head,0) | extract_keys_from_tuple(tail)]
        else
            [elem(head,0)]
        end
    end

    defp merge_map(a, b) do
        cond do
            a != nil && b != nil ->
                Map.merge(a, b)
            a != nil ->
                a
            b != nil ->
                b
            true ->
                %{}
        end
    end
end